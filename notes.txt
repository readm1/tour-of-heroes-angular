Create a new project

    Set up your environment
        Requires node.js - https://nodejs.org/en/
        Install angular CLI 
            |=> `npm install -g @angular/cli`
        Create a workshop and initial app
            |=> `ng new <app-name>`

    Serve the application
        In the workspace directory, run the following from the command line
            `ng serve --open`
        `ng serve` => builds the app, starts the dev server, watches the source files and rebuilds the app as you change those files
        `--open` => opens a browser at http://localhost:4200/

    Components are the building blocks of an Angular app. They display data and listen for/respond to user input
        Components are stored in src/app
        The application shell is controlled by the component `AppComponent`, which is broken down in to three files:
            app.component.ts (class code, written in TypeScript) - CLASS FILE
            app.component.html (component template, written in HTML) - TEMPLATE
            app.component.css (private CSS styles) - STYLE

Create a new component

    Generate a new component using the Angular CLI
        `ng generate component <component-name>`
    Will be stored in a new folder - `src/app/<component-name>`
    Generates same three files as above
    
    Always import Component from the Angular core library & annotate the component class with @Component
        @Component specifies the Angular metadata for the component
        Properties include:
            `selector` - CSS element selector
            `templateUrl` - location of the template
            `styleUrls` - location of private CSS styles
        `ngOnInit()` is called by Angular shortly after creating a component
            A good place to put initialization logic
        exporting the component class makes it possible to import elsewhere (`AppModule` for instance)

    Add a property to <component-name>.component.ts
        property = 'Hello';
    Bind it to <component-name>.component.html
        <h2>{{property}}</h2>
    Display the property by adding it to the template of the shell `AppComponent` (src/app/app.component.html) using the @Component selector 
        <component-selector></component-selector>

    Use Angular's built in pipes/create your own to format strings, currency amounts, dates etc.
        <h2>{{ component-value | uppercase}}</h2>
            |=> COMPONENT VALUE

Two-way binding

    Data flows from the component class out to the screen and from the screen back to the class
    `[(ngModel)]` is Angular's two-way binding syntax
    It references the HTML property
        `<input id="name" [(ngModel)]="hero.name" placeholder="name">`
    ngModel isn't available by default\
    In app.module.ts:
        `import { FormsModule } from '@angular/forms';` (where the ngModel lives)
    and add to @NgModule imports:
        `imports: [BrowserModule, FormsModule]`

Declaring Components

    Every component must be declared in exactly one NgModule

Lists

    `*ngFor` is Angular's repeater directive. It repeats the host element for each element in a listen
        Similar concept to a for-of loop

Styling

    Styles and stylesheets identified in @Component metadata are scoped to that specific component
    For example, `hello.component.css` styles apply only to the HelloComponent and don't affect the
    outer HTML or the HTML in any other component

Handling a click event

    Use Angular's event binding syntax to listen for an item click event
        `<li *ngFor="let hero for heroes" (click)="onSelect(hero)">`
            - `*ngFor` is Angular's repeater directive
            - `let hero for heroes` selects each individual hero in the list of heroes
            - the parentheses around `(click)` tell Angular to listen for the <li> element's click event
            - when the user clicks inside the <li>, Angular executes the `onSelect(hero)` expression

Hide empty values

    Components can only display elements if they exist. When you have a value that is empty as a default,
    wrap the HTML in a <div>, add Angular's `*ngIf` directive to the <div> and set it to the currently empty variable
        <div *ngIf="<defaultEmpty>"
    *ngIf removes the item from the DOM if it is undefined

Adding a CSS class conditionally

    Use class binding to add/remove CSS classes conditionally
        `[class.some-css-class]="some-condition"`

Create a feature component

    Keeping all features in one component as the application grows is not maintainable
    Instead, split larger components into smaller sub-components, each focussed on a specific task/workflow
    This helps to abstract your code and make sure that each individual building block takes care of a single function

***** FOR THIS EXAMPLE I AM MAKING A "HELLO WORLD" SUB-COMPONENT OF AN ORIGINAL "HELLO" COMPONENT *****

    Use the Angular CLI to generate a new component
    |=> `ng generate component hello-world`
        - creates a directory `src/app/hello-world`
        - fills the directory with:
            - CSS file for component styles
            - HTML file for component template
            - TypeScript file with a component class named `HelloWorldComponent`
            - a test file for the `HelloWorldComponent` class
        - adds `HelloWorldComponent` as a declaration int the @NgModule decorator of the `src/app/app.module.ts` file

Add the @Input() property

    The `HelloWorldComponent` template binds to the component's `hello` property which is of type `Hello`
        Open the `HelloWorldComponent` and import the `Hello` symbol (hello-world.component.ts)
            `import { Hello } from '../hello';`
        The `hello` property must be an Input property, annotated with the `@Input()` decorator, because the external
        HelloComponent will bind to it like this (in original hello.component.html file)
            `<app-hello-world [hello]="goodMorning"></app-hello-world>
        Amend the `@angular/core` import statement (in hello-world.component.ts) to include the Input symbol
            `import { Component, OnInit } from '@angular/core';` ==BECOMES==> `import { Component, OnInit, Input } from '@angular/core';`
        Add a `hello` property, preceded by the `@Input()` decorator (also in hello-world.component.ts)
            `@Input() hello?: Hello;`

Show the HelloWorldComponent

    - Instead of having a `HelloComponent` that takes care of multiple logic functions, the new setup enables you to
    delegate logic to the `HelloWorldComponent`
    - The two components have a 'parent/child' relationship. The parent `HelloComponent` controls the `HelloWorldComponent`
    - You won't change the `HelloComponent` class, but you will change it's template
    Update the `HelloComponent` template:
        - The `HelloWorldComponent` selector is 'app-hello-world'. Add an `<app-hello-world>` element near the bottom
        of the `HelloComponent` template (hello.component.html), where the hello world view used to be
        - Bind the `HelloWorld.goodMorning` to the element's `hello` property:
            `<app-hello-world [hello]="goodMorning"></app-hello-world>` ***I think we've already done this...?***
        - `[hello]="goodMorning"` is an Angular "property binding". It's a one way data binding from the `goodMorning` property of the `HelloComponent`
        to the `hello` property of the target element, which maps to the `hello` property of the `HelloWorldComponent`.
    - By doing this, the functionality of the app has not changed, but refactoring the original `HelloComponent` yields the
    following benefits, both now and in the future:
        - Reduced responsibilities for the `HelloComponent`
        - The new `HelloWorldComponent` can evolve without needing to edit/alter the parent `HelloComponent`
        - The original `HelloComponent` can evolve without affecting the child `HelloWorldComponent`
        - You can reuse the template of the `HelloWorldComponent` when creating new components in the future

Add Services

    Components shouldn't fetch or save data directly. They should focus on presenting data and delegate data access to a Service
    Services are a great way to share information among classes that don't know each other
    Create a service and inject it in to...
        - other services, which will use it to implement a function
        - components, which will display that function

Create a Service

    Use the Angular CLI to generate a new service
        `ng generate service <service-name>`
        |=> this command generates a skeleton service class in `src/app/<service-name>.service.ts`

            ``import { Injectable } from '@angular/core';

            @Injectable({
                providedIn: 'root',
            })
            export class HeroService {

                constructor() { }

            }``

        - The new service imports `Injectable` and anotates the class with `@Injectable()`, marking the class as part of the
        dependency injection system. The class will provide an injectable service and can have it's own injected dependencies

    Getting data
        - Using a service means that you can get data from anywhere. Removing component data access means that it is really easy
        to change the implementation of the system without having to alter the layout of your components. This abstracts the
        system as it doesn't need to know how the service works
        - In `src/app/<service-name>.service.ts` file:
            - Import necesarry classes from your class file => `import { hello } from './hello';`
            - Import any data that you will be using (web service, local storage, a mock data source) => `import { HELLO } from './mock-hello';`
            - Add a Get method to return the data
                ``  getHello(): Hello[] {
                        return HELLO;
                    } ``

    Provide the Service
        - The service needs to be made available to the dependency injection system before it can be injected by Angular in those
        the necesarry component(s). You do this with a provider. A provider creates or delivers a service. For instance, it could
        instantiate a service so that it is available for use
        - To make sure a service is properly instantiated, it needs to be registered with the injector. The injector is responsible
        for choosing and injecting the service in all of the necesarry places
        - The initial CLI command `ng generate service <service-name` registers a default provider for the service by including
        provider metadata in the Injectable decorator (`src/app/<service-name>.service.ts`)
            |=>   ``@Injectable({
                      providedIn: 'root',
                    })``
            - When provided at the root level, Angular creates a single, shared instance of the service and injects it in to any class
            that requests it. Angular will also remove the service is it ends up not being used, optimizing the application

    Update your Components
        - Make sure to update any components that had previously been accessing data from other sources and update any property definitions
        - You will also need to add a private service parameter to the constructor:
            `constructor(private helloService: HelloService) {}`
            |=> This both defines the `helloService` property and identifies it as a `HelloService` injection site
            Now, when Angular creates a component, the dependency injection system sets the service parameter to the instance of `HelloService`
        - Create a Get method to retrieve data from the service
          ``getHello(): void {
              this.hello = this.helloService.getHello();
            }``
        - Call the Get method in `ngOnInit()`
            - It would be possible to call the Get method in the constructor, but the constructor should be reserved for minimal initialization.
            The constructor shouldn't DO anything beyond what is necesarry in the construction of the component
            - Instead call the Get method inside `ngOnInit()`, leaving Angular to call it when necesarry after constructing the component
          ``ngOnInit(): void {
              this.getHello();
            }``
    
    Observable Data
        - Currently, the Get method has a "synchronous signature", implying that it fetches data synchronously. This means that the data should
        be returned instantly, or the browser would freeze the UI while waiting for a response. This means tha fetching data from a remote server
        needs to be done "asynchronously" - the service receives a callback when the data has been received, allowing the browser to continue working
        as normal while the request is handled
        - `Observable` is one of the key classes in the RxJS library - import `Observable` in your `service.ts` file
            `import { Observable, of } from 'rxjs';
        - Update your Get method
          ``getHello(): Observable<Hello[]> {
              const hello = of(HELLO);
              return hello;
            } ``
        - Subscribe in child Component
            - The Get method used to return a `Hello[]`. It now returns an `Observable<Hero[]>`. The Get method in the child component .ts file
            needs to be updated to reflect this change
            FROM
              ``getHello(): void {
                  this.hello = this.helloService.getHello();
                }``
            TO
              ``getHello(): void {
                  this.hello = this.helloService.getHello().subscribe(hello => (this.hello = hello));
                }``
            - This means that the service will wait for the Observable to return. The `subscribe()` method passes the returned data to the callback,
            and sets the value of the `hello` property